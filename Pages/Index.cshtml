@page
@using System.Text.RegularExpressions;
@model IndexModel
@{
ViewData["Title"] = "🌟 Taylor Ticket Watch 🌟";
}
<meta name="viewport" content="width=device-width, initial-scale=1.0">

@functions {
    public string GetRelativeTime(DateTime date)
    {                
        TimeSpan timeSpan = DateTime.Now.ToUniversalTime() - date;

        if (timeSpan.TotalDays > 1)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalMinutes > 1)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalSeconds > 1)
            return $"{(int)timeSpan.TotalSeconds} seconds ago";

        return "Just now";
    }
}

<h1>🌟 Taylor Ticket Watch 🌟</h1>
@* <p id="priceStats" style="text-align:center;"></p>
@{
    var averagePrice = Model.Data.Where(item => item.insertdatetime.Date > DateTime.Today.AddDays(-1).Date).Average(item => item.price);
    var yesterdayAveragePrice = Model.Data.Where(item => item.insertdatetime.Date == DateTime.Today.AddDays(-1).Date).Average(item => item.price);
    var averageDifference = Model.Data.
    string priceTrend = averagePrice > yesterdayAveragePrice ? "📈" : "📉";
}
<script>
    document.getElementById("priceStats").innerHTML = "Average Yesterday: $@yesterdayAveragePrice.ToString("F2") Today: $@averagePrice.ToString("F2") Trend: @priceTrend";
</script> *@
<div class="responsive-table">
    <table>
        <thead>
            <tr>
                <th>🆔</th>
                <th>🔗</th>
                <th>🕒</th>                                
                <th>✅</th>
                <th>💵</th>
                <th></th>
                <!-- Add more table headers based on your table schema -->
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Data.OrderByDescending(x => x.insertdatetime).ToList())
            {
                var prevprice = (Model.Data.OrderByDescending(x => x.insertdatetime).Where(x => x.rowid == item.rowid && x.url == item.url && x.id != item.id).MaxBy(x => x.insertdatetime)?.price ?? 0);
                string cityPattern = @"taylor-swift-(\w+)-tickets";
                string datePattern = @"tickets-(\d+-\d+-\d+)";

                Match cityMatch = Regex.Match(item.url, cityPattern);
                Match dateMatch = Regex.Match(item.url, datePattern);

                string city = cityMatch.Success ? cityMatch.Groups[1].Value : "Unknown";
                string date = dateMatch.Success ? dateMatch.Groups[1].Value : "Unknown";
                <tr>
                    <td data-label="🆔">@item.rowid</td>
                    <td data-label="🔗"><a href="@item.url">@city @date</a></td>
                    <td data-label="🕒">@GetRelativeTime(item.insertdatetime)</td>                                        
                    <td data-label="✅">@(!Model.RmEvents.Any(x => x.rowid == item.rowid))</td>
                    <td data-label="💵">$@prevprice -> $@item.price</td>                    
                    <td data-label=""><img src="@item.img"></td>
                </tr>
            }
        </tbody>
    </table>
</div>