@page
@using System.Text.RegularExpressions;
@model IndexModel
@{
}

<!-- Meta and Stylesheets -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.6.0/css/bootstrap.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Elsie+Swash+Caps:wght@400;900&family=Roboto:ital,wght@0,400;1,900&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Elsie+Swash+Caps:wght@400;900&family=Open+Sans:wght@300&family=Roboto:ital,wght@0,400;1,900&family=Yeseva+One&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@400;600&display=swap" rel="stylesheet">

<h1>🌟Taylor 🎟️Ticket 🤩Watch</h1>
<h2>Price Changes By The Second</h2>
<div class="container-sm mt-3 mb-2">
    <div class="row">
        <div class="col-12 col-md-6">
            <select class="form-control" id="locationSelect" onchange="updateDates()">
                <option value="">Location</option>
                @foreach (var location in Model.LocationDays.Select(ld => ld.location).Distinct())
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>
        <div class="col-12 col-md-3">
            <select class="form-control" id="dateSelect" disabled onchange="addLocationDatePair()">
                <option value="">Date</option>
                <option value="all">All Dates</option>
            </select>
        </div>
        <div class="col-12 col-md-3">
            <select class="form-control" id="quantitySelect" onchange="addLocationDatePair()">
                <option value="1">Seat Quantity 1</option>
                <option value="2">Seat Quantity 2</option>
                <option value="3">Seat Quantity 3</option>
            </select>
        </div>        
    </div>
    <div class="row">
        <div class="col-12">
            <div id="selectedPairs" class="d-flex flex-wrap" style="justify-content: center;">
            </div>
        </div>
    </div>
</div>

<div class="responsive-table">
    @await Html.PartialAsync("_TableContent", Model.EventsViewModel)
</div>

<script>
    function formatDate(date) {
        const parts = date.split('-');
        return `${parts[0].padStart(2, '0')}-${parts[1].padStart(2, '0')}`;
    }
    function standardizeLocation(location) {
        const cityPattern = /^(.*?)(?: [A-Z]{2})?$/;
        const cityMatch = location.match(cityPattern);

        if (cityMatch) {
            return cityMatch[1].toLowerCase();
        } else {
            return location.toLowerCase();
        }
    }
function filterTableRows() {
    const tableRows = document.querySelectorAll('.responsive-table table tbody tr');
    const tags = document.querySelectorAll('#selectedPairs .tag');

tableRows.forEach(row => {
    const location = standardizeLocation(row.getAttribute('data-location')).replace(/-/g, ' '); // Replace hyphens with spaces
    const date = formatDate(row.getAttribute('data-location-date'));
    const quantity = parseInt(row.querySelector('td[data-label="👯"]').textContent);
    let rowMatchesTag = false;

    tags.forEach(tag => {
        const tagInfo = tag.innerText.match(/(.*?) (\d+-\d+) \(Qty: (\d+)\)/);
        const tagLocation = standardizeLocation(tagInfo[1]).replace(/-/g, ' '); // Replace hyphens with spaces
        const tagDate = formatDate(tagInfo[2]);
        const tagQuantity = parseInt(tagInfo[3]);

        if (location === tagLocation && date === tagDate && quantity === tagQuantity) {
            rowMatchesTag = true;
        }
    });

    if (rowMatchesTag) {
        row.style.display = '';
    } else {
        row.style.display = 'none';
    }
});
}
    function updateDates() {
        const locationSelect = document.getElementById("locationSelect");
        const dateSelect = document.getElementById("dateSelect");
        const selectedLocation = locationSelect.value;

        if (selectedLocation) {
            dateSelect.innerHTML = '<option value="">Choose a date</option>';
            dateSelect.disabled = false;

            @foreach (var locationDay in Model.LocationDays)
            {
                <text>
                if (selectedLocation === "@locationDay.location") {
                    const option = document.createElement("option");
                    option.value = "@locationDay.day.ToString("MM-dd")";
                    option.text = "@locationDay.day.ToString("MM-dd")";
                    dateSelect.add(option);
                }
                </text>
            }
            dateSelect.add(new Option("All Dates", "all"));
        } else {
            dateSelect.innerHTML = '<option value="">Choose a date</option>';
            dateSelect.disabled = true;
        }
    }

function addLocationDatePair() {
    const locationSelect = document.getElementById("locationSelect");
    const dateSelect = document.getElementById("dateSelect");
    const quantitySelect = document.getElementById("quantitySelect");
    const selectedSeatQuantity = quantitySelect.value;

    if (locationSelect.value && dateSelect.value && selectedSeatQuantity) {
        if (dateSelect.value === "all") {
            // Get all available dates for the selected location
            const availableDates = Array.from(dateSelect.options)
                .map(option => option.value)
                .filter(value => value !== "" && value !== "all");

            // Add a tag for each available date
            for (const date of availableDates) {
                const pair = `${locationSelect.value} ${date} (Qty: ${selectedSeatQuantity})`;
                const storageKey = `locationDatePair-${pair}`;

                // Check if the item already exists in local storage
                if (!localStorage.getItem(storageKey)) {
                    localStorage.setItem(storageKey, pair);
                    addTag(pair);
                    load();
                }
            }
        } else {
            const pair = `${locationSelect.value} ${dateSelect.value} (Qty: ${selectedSeatQuantity})`;
            const storageKey = `locationDatePair-${pair}`;

            // Check if the item already exists in local storage
            if (!localStorage.getItem(storageKey)) {
                localStorage.setItem(storageKey, pair);
                addTag(pair);
                load();
            }
        }
    }
}

function updateTableContent(content) {
    const tableWrapper = document.querySelector('.responsive-table');
    tableWrapper.innerHTML = content;
}

    function ajaxRequest(url, callback) {
        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    callback(xhr.responseText);
                } else {
                    console.error('AJAX request failed:', xhr.status);
                }
            }
        };
        xhr.open('GET', url, true);
        xhr.send();
    }

    function load() {
        const selectedPairs = document.getElementById("selectedPairs");
        var selectedLocationDayPairs = Array.from(selectedPairs.children).map(tag => {
            const parts = tag.getAttribute("data-pair").split(" "); // Use the data-pair attribute instead of innerText
            return {
                Location: parts.slice(0, -1).join(" ").toLowerCase(),
                Day: parts[parts.length - 1]
            };
        });
        // Convert the selected location-day pairs into a comma-separated string
        var locationDayPairsString = selectedLocationDayPairs.map(function (ldp) {
            return ldp.Location + ":" + ldp.Day;
        }).join(',');

        // Create the URL with the locationDayPairs query parameter
        var url = new URL(window.location.origin + "/Index?handler=TableContent");
        url.searchParams.append("locationDayPairs", locationDayPairsString);

        ajaxRequest(url.toString(), function (response) {
            if (response.trim()) {
                updateTableContent(response);
                filterTableRows();

                // Check if info block exists and hide it if it does
                @* var infoBlock = document.querySelector('div#info-block');
                if (infoBlock) {
                    infoBlock.style.display = 'none';
                } *@

                // Show the table
                var table = document.querySelector('table#eventsTable');
                table.style.display = '';
            }
        });
    }

function addTag(pair, load = true) {
    const selectedPairs = document.getElementById("selectedPairs");
    
    // Check if the tag already exists
    const existingTags = Array.from(selectedPairs.querySelectorAll('.tag'));
    const tagExists = existingTags.some(existingTag => existingTag.innerText === pair);

    if (!tagExists) {
        const tag = document.createElement("div");
        tag.className = "tag";
        tag.setAttribute("data-pair", pair.split(" (Qty:")[0]); // Add the data-pair attribute
        tag.innerText = pair;
        tag.onclick = function () {
            removeTag(tag, pair);
        };
        selectedPairs.appendChild(tag);
        filterTableRows();
    }
}

function removeTag(tag, pair) {
    tag.remove();
    const storageKey = `locationDatePair-${pair}`;
    localStorage.removeItem(storageKey);
    filterTableRows();
}

function loadTagsFromLocalStorage() {
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('locationDatePair-')) {
            addTag(key.substring('locationDatePair-'.length));
        }
    }
    load();
    filterTableRows();
}

loadTagsFromLocalStorage();    
</script>
