@page
@using System.Text.RegularExpressions;
@model IndexModel
@{
ViewData["Title"] = "🎫Ticket Watch";
}

<!-- Meta and Stylesheets -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.6.0/css/bootstrap.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Elsie+Swash+Caps:wght@400;900&family=Roboto:ital,wght@0,400;1,900&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Elsie+Swash+Caps:wght@400;900&family=Open+Sans:wght@300&family=Roboto:ital,wght@0,400;1,900&family=Yeseva+One&display=swap" rel="stylesheet">
<style>
    .responsive-table table tbody tr {
        min-height: 100px; /* Adjust this value according to your needs */
        background-color: #f8f9fa; /* A light gray background color */
    }
</style>
<h1>🌟Taylor 🎟️Ticket 🤩Watch</h1>
<h2>Ticket Price Changes Minute to Minute</h2>
<div class="container mt-5 mb-2">
    <div class="row">
        <div class="col">
            <select class="form-control" id="locationSelect" onchange="updateDates()">
                <option value="">Choose a location</option>
                @foreach (var location in Model.LocationDays.Select(ld => ld.location).Distinct())
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>
        <div class="col">
            <select class="form-control" id="dateSelect" disabled onchange="addLocationDatePair()">
                <option value="">Choose a date</option>
                <option value="all">All Dates</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div id="selectedPairs" class="d-flex flex-wrap">
            </div>
        </div>
    </div>
</div>    

<div class="responsive-table">
    @await Html.PartialAsync("_TableContent", Model.Events)
</div>

<script>
    function formatDate(date) {
        const parts = date.split('-');
        return `${parts[0].padStart(2, '0')}-${parts[1].padStart(2, '0')}`;
    }
    function filterTableRows() {
        const tableRows = document.querySelectorAll('.responsive-table table tbody tr');
        const datePairs = new Set();

        // Regular expression to extract the date from the standard format
        const datePattern = /locationDatePair-.*? (\d+-\d+)$/;

        // Collect date pairs from local storage
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.startsWith('locationDatePair-')) {
                const dateMatch = key.match(datePattern);
                if (dateMatch) {
                    datePairs.add(dateMatch[1]); // Add only the date part
                }
            }
        }

        // Show or hide table rows based on the date pairs
        tableRows.forEach(row => {
            const locationDate = formatDate(row.getAttribute('data-location-date'));
            if (datePairs.has(locationDate)) {
                row.style.display = ''; // Show the row
            } else {
                row.style.display = 'none'; // Hide the row
            }
        });
    }
    function updateDates() {
        const locationSelect = document.getElementById("locationSelect");
        const dateSelect = document.getElementById("dateSelect");
        const selectedLocation = locationSelect.value;

        if (selectedLocation) {
            dateSelect.innerHTML = '<option value="">Choose a date</option>';
            dateSelect.disabled = false;

            @foreach (var locationDay in Model.LocationDays)
            {
                <text>
                if (selectedLocation === "@locationDay.location") {
                    const option = document.createElement("option");
                    option.value = "@locationDay.day.ToString("MM-dd")";
                    option.text = "@locationDay.day.ToString("MM-dd")";
                    dateSelect.add(option);
                }
                </text>
            }
            dateSelect.add(new Option("All Dates", "all"));
        } else {
            dateSelect.innerHTML = '<option value="">Choose a date</option>';
            dateSelect.disabled = true;
        }
    }

function addLocationDatePair() {
    const locationSelect = document.getElementById("locationSelect");
    const dateSelect = document.getElementById("dateSelect");

    if (locationSelect.value && dateSelect.value) {
        if (dateSelect.value === "all") {
            // Get all available dates for the selected location
            const availableDates = Array.from(dateSelect.options)
                .map(option => option.value)
                .filter(value => value !== "" && value !== "all");

            // Add a tag for each available date
            for (const date of availableDates) {
                const pair = `${locationSelect.value} ${date}`;
                const storageKey = `locationDatePair-${pair}`;

                // Check if the item already exists in local storage
                if (!localStorage.getItem(storageKey)) {
                    localStorage.setItem(storageKey, pair);
                    addTag(pair);
                }
            }
        } else {
            const pair = `${locationSelect.value} ${dateSelect.value}`;
            const storageKey = `locationDatePair-${pair}`;

            // Check if the item already exists in local storage
            if (!localStorage.getItem(storageKey)) {
                localStorage.setItem(storageKey, pair);
                addTag(pair);
            }
        }
    }
}

    function updateTableContent(content) {
        const table = document.querySelector('.responsive-table > table');
        table.innerHTML = content;
    }

    function ajaxRequest(url, callback) {
        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    callback(xhr.responseText);
                } else {
                    console.error('AJAX request failed:', xhr.status);
                }
            }
        };
        xhr.open('GET', url, true);
        xhr.send();
    }

    function addTag(pair, reload = true) {
        const selectedPairs = document.getElementById("selectedPairs");
        const tag = document.createElement("div");
        tag.className = "tag";
        tag.innerText = pair;
        tag.onclick = function () {
            removeTag(tag, pair);
        };

        selectedPairs.appendChild(tag);
        if (reload) {
            // Replace this with the actual JavaScript code that generates the selected location-day pairs
            var selectedLocationDayPairs = Array.from(selectedPairs.children).map(tag => {
                const parts = tag.innerText.split(' ');
                return {
                    Location: parts.slice(0, -2).join(' ').toLowerCase(),
                    Day: parts[parts.length - 1]
                };
            });
            // Convert the selected location-day pairs into a comma-separated string
            var locationDayPairsString = selectedLocationDayPairs.map(function (ldp) {
                return ldp.Location + ":" + ldp.Day;
            }).join(',');

            // Create the URL with the locationDayPairs query parameter
            var url = new URL(window.location.origin + "/Index?handler=TableContent");
            url.searchParams.append("locationDayPairs", locationDayPairsString);

            ajaxRequest(url.toString(), function (response) {
                updateTableContent(response);
                filterTableRows();
            });
    }
    filterTableRows();
}

function removeTag(tag, pair) {
    tag.remove();
    const storageKey = `locationDatePair-${pair}`;
    localStorage.removeItem(storageKey);
    filterTableRows();
}

function loadTagsFromLocalStorage() {
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('locationDatePair-')) {
            addTag(key.substring('locationDatePair-'.length), false);
        }
    }
    filterTableRows();
}

loadTagsFromLocalStorage();    
</script>


