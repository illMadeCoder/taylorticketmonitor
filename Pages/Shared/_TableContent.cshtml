@using System.Text.RegularExpressions;
@model EventsViewModel;
@functions {
    public string GetRelativeTime(DateTime date)
    {
        TimeSpan timeSpan = DateTime.Now.ToUniversalTime() - date;
        if (timeSpan.TotalDays > 1)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalMinutes > 1)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalSeconds > 1)
            return $"{(int)timeSpan.TotalSeconds} seconds ago";

        return "Just now";
    }
}
<table>
    <thead>
        <tr>
            <th class="center">ðŸ’º section</th>
            <th class="center">ðŸ”— event</th>
            <th class="center">ðŸ•’ observed</th>                                
            <th class="center">ðŸ’µ cost</th>
            <th class="center">ðŸ“· img</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Events)
    {
        var prevprice = Model.EventPrevPrice.First(x => x.id == item.id).prevprice;
        string cityPattern = @"taylor-swift-([\w-]+)-tickets";
        string datePattern = @"tickets-(\d+-\d+)";
        Match cityMatch = Regex.Match(item.url, cityPattern);
        Match dateMatch = Regex.Match(item.url, datePattern);
        string city = cityMatch.Success ? cityMatch.Groups[1].Value : "Unknown";
        string date = dateMatch.Success ? dateMatch.Groups[1].Value : "Unknown";
        <tr data-location-date="@date">
            <td data-label="ðŸ’º">@item.section</td>
            <td data-label="ðŸ”—"><a href="@item.url">@city @date</a></td>
            <td data-label="ðŸ•’">@GetRelativeTime(item.insertdatetime)</td>                                        
            <td data-label="ðŸ’µ">@(prevprice == 0 ? "new" : $"${prevprice}") -> $@item.price</td>      
            <td data-label="ðŸ“·" class="image-cell"><img src="@item.img" loading="lazy"></td>
        </tr>
    }
    </tbody>
</table>